# Build stage definitions
.build-template: &build-template
  stage: build
  tags: 
    - arch:amd64
    - size:2xlarge
  variables:
    PARALLEL_PROC: 2
    GIT_STRATEGY: fetch
    GIT_SUBMODULE_STRATEGY: normal
  artifacts:
    when: always
    paths:
      # Must be able to see logs
      - build.log

amazonlinux-2023-build:
  <<: *build-template
  image: amazonlinux:2023
  script:
    # Install packages required for build
    - dnf install -y cmake gcc gcc-c++ openssl-devel ncurses-devel bison zlib-devel
    - dnf install -y https://github.com/stewartsmith/libeatmydata/releases/download/v129/libeatmydata-129-1.fc33.x86_64.rpm
    # Make the build directory
    - mkdir -p builddir && cd builddir
    # Configure the build with cmake
    - cmake $CMAKE_FLAGS -O .. 2>&1 | tee -a ../build.log
    # Accelerate builds with unsafe disk access, as we can afford to loose the entire build anyway
    - eatmydata make package -j $PARALLEL_PROC 2>&1 | tee -a ../build.log

fedora:
  # override upstream image
  image: fedora:38
  # override upstream runner
  tags: 
    - arch:amd64
    - size:2xlarge

fedora-sanitizer:
  # override upstream image
  image: fedora:38
  # override upstream runner
  tags: 
    - arch:amd64
    - size:2xlarge

fedora-ninja:
  # override allow failure until https://github.com/MariaDB/server/pull/3026 is merged
  allow_failure: true

# # This is not yet implemented, but a placeholder and example of what can be done with internal CI.
# mini-benchmark:
#   after_script:
#     - mkdir -p plots
#     # - ./parse_results.py  # Do additional analysis of reported results
#   artifacts:
#     when: always
#     paths:
#       - sysbench-run-*.log
#       # extend artifats with additional plots directory
#       - plots/
#     reports:
#       metrics:
#         - metrics.txt

# Sast scanning is a mess when trying to maintain an ignorelist across all branches.
# Let's allow failure until it can be properly cleaned up
cppcheck:
  allow_failure: true
  stage: sast
  needs: []
  variables:
    GIT_STRATEGY: fetch
    GIT_SUBMODULE_STRATEGY: normal
  script:
    # Only run sast scanning on select branches
    - |
      case "$CI_COMMIT_BRANCH" in
        10.4|10.6|10.11)
          echo will execute cppcheck for $CI_COMMIT_BRANCH
          ;;
        *)
          echo will not execute cppcheck for $CI_COMMIT_BRANCH
          exit 0
          ;;
    - yum install -y cppcheck diffutils
    # --template: use a single-line template
    # --force: check large directories without warning
    # -i<directory>: ignore this directory when scanning
    # -j: run multiple cppcheck threads
    # Use newline to escape colon in yaml
    - >
      cppcheck --template="{file}:{line}: {severity}: {message}" --force
      client dbug extra include libmariadb libmysqld libservices mysql-test mysys mysys_ssl pcre plugin
      strings tests unittest vio wsrep-lib sql sql-common storage
      -istorage/mroonga -istorage/tokudb -istorage/spider -istorage/rocksdb -iextra/ -ilibmariadb/ -istorage/columnstore
      --output-file=cppcheck.txt -j $(nproc)
    # Parallel jobs may output findings in an nondeterministic order. Sort to match ignorelist.
    - cat cppcheck.txt | sort > cppcheck_sorted.txt
    # Remove line numbers for diff
    - sed 's/:[^:]*:/:/' cppcheck_sorted.txt > cppcheck_sorted_no_line_numbers.txt
    # Unknown macros are mostly false positives. Ignore them until a solution is found.
    - grep -v "There is an unknown macro here somewhere" cppcheck_sorted_no_line_numbers.txt > cppcheck_sorted_no_line_numbers_no_macro.txt
    - grep -v "There is an unknown macro here somewhere" tests/code_quality/cppcheck_ignorelist.txt > tests/code_quality/cppcheck_ignorelist_no_macro.txt
      # Only print new issues not found in ignore list
    - echo "Problems found in ignore list that were not discovered by cppcheck (may have been fixed)."
    - diff --changed-group-format='%>' --unchanged-group-format='' cppcheck_sorted_no_line_numbers_no_macro.txt tests/code_quality/cppcheck_ignorelist_no_macro.txt || true
    - echo "Problems found by cppcheck that were not in ignore list."
    - diff --changed-group-format='%<' --unchanged-group-format='' cppcheck_sorted_no_line_numbers_no_macro.txt tests/code_quality/cppcheck_ignorelist_no_macro.txt > lines_not_ignored.txt || true
    - cat lines_not_ignored.txt && test ! -s lines_not_ignored.txt
  artifacts:
    when: always
    paths:
      - cppcheck_sorted.txt

flawfinder:
  allow_failure: true
  stage: sast
  needs: []
  variables:
    GIT_STRATEGY: fetch
    GIT_SUBMODULE_STRATEGY: normal
  script:
    # Only run sast scanning on select branches
    - |
      case "$CI_COMMIT_BRANCH" in
        10.4|10.6|10.11)
          echo will execute cppcheck for $CI_COMMIT_BRANCH
          ;;
        *)
          echo will not execute cppcheck for $CI_COMMIT_BRANCH
          exit 0
          ;;
    - yum install -y python3 python3-pip jq diffutils git
    - pip install flawfinder
    - flawfinder --falsepositive --quiet --html . > flawfinder-all-vulnerabilities.html
    - cat flawfinder-all-vulnerabilities.html | grep "Hits ="
    - flawfinder --falsepositive --quiet --minlevel=5 --sarif . > flawfinder-output.json
    # FlawFinder's --sarif output will display all vulnerabilities despite having --minlevel=5 specified.
    # Therefore, we postprocess the results with jq and filter out findings where the vulnerability level is less than 5.
    # Also in the SARIF output format, the vulnerabilities are ranked as 0.2/0.4/0.6/0.8/1.0 which correspond to the --minlevel=1/2/3/4/5 of FlawFinder.
    # Additionally, we sort the results because individual findings are consistent across different runs, but their ordering may not be.
    # Vulnerabilities can also be ignored in-line (/* Flawfinder: ignore */), but this option was chosen as to not clutter the codebase.
    - jq 'del(.runs[] | .tool | .driver | .rules) | del(.runs[] | .results[] | select(.rank < 1)) | del(.runs[] | .results[] | .locations[] | .physicalLocation | .region | .startLine) | .runs[0].results|=sort_by(.fingerprints)' flawfinder-output.json > flawfinder-min-level5.json
    # Diff against known vulnerabilities, but ignore the line number.
    - echo "Problems found in ignore list that were not discovered by flawfinder (may have been fixed)."
    - diff --changed-group-format='%>' --unchanged-group-format='' flawfinder-min-level5.json tests/code_quality/flawfinder_ignorelist.json || true
    - echo "Problems found by flawfinder that were not in ignore list."
    - diff --changed-group-format='%<' --unchanged-group-format='' flawfinder-min-level5.json tests/code_quality/flawfinder_ignorelist.json > lines_not_ignored.txt || true
    - cat lines_not_ignored.txt && test ! -s lines_not_ignored.txt
  artifacts:
    when: always
    paths:
      - flawfinder-all-vulnerabilities.html
      - flawfinder-min-level5.json